// This is all the styles the toast component uses.
// You may change any of the default values
// by appending the value with !important.
//
// To get the plain CSS rules just plug
// it into an online converter
@use "sass:math";

.vt-success {
    & > .vt-icon > svg {
        fill: #199919;
    }
    border-color: #199919;
}
.vt-info {
    & > .vt-icon > svg {
        fill: #003bc8;
    }
    border-color: #003bc8;
}
.vt-warning {
    & > .vt-icon > svg {
        fill: #ffb300;
    }
    border-color: #ffb300;
}
.vt-error {
    & > .vt-icon > svg {
        fill: #ffffff !important;
    }
    border-color: #ffffff !important;
}
// You may reorganise the items with the order rule
.vt-notification {
    transition: transform 100ms ease; // This ensures that on drag the notification slides back to its original position
    box-sizing: border-box;
    pointer-events: auto;
    box-shadow: 0 0 10px 0.5px rgba(0, 0, 0, 0.35);
    padding: 10px 20px;
    min-height: 100px;
    min-width: 250px;
    border-radius: 5px;
    margin-bottom: 10px;
    margin-left: auto;
    margin-right: auto;
    z-index: 9999;
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-flow: wrap row;
    align-content: center;
    & > .vt-progress-bar {
        height: 3px;
        width: 100%;
        margin-bottom: 5px;
        & > .vt-progress {
            max-width: 100%;
            height: 3px;
            overflow: hidden;
            transition: max-width 1ms ease-in-out;
        }
    }
    & > .vt-content {
        width: auto;
        height: 100%;
        max-width: 250px;
        word-break: break-word;
        & > .vt-title {
            font-size: 1.4rem;
            margin: 0;
        }
        & > .vt-paragraph {
            font-size: 1rem;
            margin: 0.5rem 0;
        }
    }
    & > .vt-circle {
        border-style: solid;
        border-width: 2px;
        width: 65px;
        height: 65px;
        border-radius: 50%;
        margin: 5px !important;
    }
    & > .vt-icon-container {
        margin: 0 20px;
        position: relative;
        & > .vt-icon {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    }
    & > .vt-buttons {
        flex-basis: 100%;
        display: flex;
        flex-flow: row wrap;
        align-content: center;
        align-items: center;
        justify-content: space-evenly;
        margin: 5px -23px 0;
        & > button {
            flex-basis: 48%;
            width: auto;
            margin-bottom: 4px;
            border-radius: 4px;
        }
    }
}
@media (max-width: 268px) {
    .vt-notification {
        min-height: auto;
        min-width: 100%;
        border-radius: 0;
        & > .vt-content {
            text-align: center;
        }
    }
    .vt-notification-container {
        width: 100%;
        margin: 0;
    }
}
.vt-will-change {
    will-change: transform, opacity;
}

// This controls how the notification should move when others are added/removed
.vt-move {
    transition-timing-function: ease-in-out;
    transition-property: all;
    transition-duration: 200ms;
    &[data-delayed="true"] {
        transition-delay: 200ms !important; // this should be set to the same as the transition leave duration
    }
}
.vt-spinner {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: transparent;
    animation: 1s spin linear infinite;
}
.vt-cursor-wait {
    cursor: wait;
}
.vt-cursor-pointer {
    cursor: pointer;
}

@keyframes spin {
    from {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
    }
    to {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
    }
}

@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }

    @return $value;
}
@function luminance($color) {
    $colors: (
        "red": red($color),
        "green": green($color),
        "blue": blue($color),
    );

    @each $name, $value in $colors {
        $adjusted: 0;
        $value: math.div($value, 255);

        @if $value < 0.03928 {
            $value: math.div($value, 12.92);
        } @else {
            $value: math.div($value + 0.055, 1.055);
            $value: math.pow($value, 2.4);
        }

        $colors: map-merge(
            $colors,
            (
                $name: $value,
            )
        );
    }

    @return (map-get($colors, "red") * 0.2126) +
        (map-get($colors, "green") * 0.7152) +
        (map-get($colors, "blue") * 0.0722);
}
@function color-change($color, $percentage) {
    @if (luminance($color) > 0.4) {
        $color: darken($color, $percentage);
    } @else {
        $color: lighten($color, $percentage);
    }
    @return $color;
}
$themes: (
    "dark": #1d1d1d,
    "light": #f0f0f0,
);
@each $name, $color in $themes {
    .vt-theme-#{$name} {
        background-color: $color;
        & > .vt-progress-bar {
            background-color: color-change($color, 10%);
            & > .vt-progress {
                background-color: color-change($color, 30%);
            }
        }
        & > .vt-content {
            & > .vt-title {
                color: color-change($color, 75%);
            }
            & > .vt-paragraph {
                color: color-change($color, 75%);
            }
        }
        & > .vt-buttons {
            & > button {
                border: solid 1px color-change($color, 10%);
                background-color: color-change($color, 10%);
                color: color-change($color, 75%);
                transition: all 0.2s ease-out;
                &:hover {
                    background-color: color-change($color, 65%);
                    color: color-change($color, 5%);
                    transition: all 0.2s ease-out;
                }
            }
        }
        & > .vt-prompt {
            & > .vt-icon > svg {
                fill: color-change($color, 70%);
            }
            border-color: color-change($color, 70%);
        }
        & > .vt-icon-container > .vt-spinner {
            border: 2px solid color-change($color, 30%);
            border-top: 2px solid color-change($color, 90%);
        }
    }
}

.vt-right-enter-active,
.vt-left-enter-active,
.vt-bottom-enter-active,
.vt-top-enter-active,
.vt-center-enter-active {
    transition: all 0.2s ease-out;
}

.vt-right-leave-active,
.vt-left-leave-active,
.vt-bottom-leave-active,
.vt-top-leave-active,
.vt-center-leave-active {
    transition: all 0.2s ease-in;
}

.vt-right-enter,
.vt-right-leave-to {
    transform: translateX(50px);
    opacity: 0;
}

.vt-left-enter,
.vt-left-leave-to {
    transform: translateX(-50px);
    opacity: 0;
}

.vt-bottom-enter,
.vt-bottom-leave-to {
    transform: translateY(50px);
    opacity: 0;
}

.vt-top-enter,
.vt-top-leave-to {
    transform: translateY(-50px);
    opacity: 0;
}

.vt-center-enter,
.vt-center-leave-to {
    opacity: 0;
}
